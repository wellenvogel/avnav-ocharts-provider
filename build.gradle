/******************************************************************************
 *
 * Project:  AvNav ocharts-provider
 * Purpose:  gradle build script
 * Author:   Andreas Vogel
 *
 ***************************************************************************
 The MIT License (MIT)

 Copyright (c) 2020 Andreas Vogel (andreas@wellenvogel.net)

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.

 IMPORTANT: parts of the project are licensed under the GPLv2 license:
            provider/...
            s57data/...

 ***************************************************************************
 *
 */
import java.security.MessageDigest
import java.text.SimpleDateFormat
import org.apache.commons.net.ftp.*
import org.eclipse.jgit.storage.file.FileRepositoryBuilder
import org.eclipse.jgit.lib.Repository
import org.eclipse.jgit.lib.ObjectId
import org.gradle.api.*
import com.moowork.gradle.node.npm.*

def VARIANTS=[
        [osline:'ubuntu',
         osversion:'bionic', 
         arch: 'amd64',
         dockerfile: 'Dockerfile.gtk2',       
         dependencies: [
                ['libc6'],
                ['libgcc1'],
                ['libstdc++6'],
                ['libwxbase3.0-0v5'],
                ['libwxgtk3.0-0v5'],
                ['wx3.0-i18n']
        ]],
        [osline:'debian',
         osversion:'buster',
         arch: 'i386',
         dockerbase:'i386/debian',
         dockerfile:'Dockerfile.gtk2',
         dependencies:[
                 ['libc6'],
                 ['libgcc1'],
                 ['libstdc++6'],
                 ['libwxbase3.0-0v5'],
                 ['libwxgtk3.0-0v5'],
                 ['wx3.0-i18n']
        ]],
        [osline:'debian',
         osversion:'buster',
         arch: 'amd64',
         dockerbase:'debian',
         dockerfile:'Dockerfile.gtk2',
         dependencies:[
                 ['libc6'],
                 ['libgcc1'],
                 ['libstdc++6'],
                 ['libwxbase3.0-0v5'],
                 ['libwxgtk3.0-0v5'],
                 ['wx3.0-i18n']
        ]],
        [osline:'raspbian',
         osversion:'buster',
         arch: 'armhf', 
         dockerbase:'arm32v7/debian', 
         dockerfile:'Dockerfile.gtk2',
         dependencies:[
                ['libc6'],
                ['libgcc1'],
                ['libstdc++6'],
                ['libwxbase3.0-0v5'],
                ['libwxgtk3.0-0v5'],
                ['wx3.0-i18n']
        ]],
        [osline:'raspbian',
         osversion:'buster',
         arch: 'arm64',
         dockerbase:'arm64v8/debian',
         dockerfile:'Dockerfile.gtk2',
         dependencies:[
                 ['libc6'],
                 ['libgcc1'],
                 ['libstdc++6'],
                 ['libwxbase3.0-0v5'],
                 ['libwxgtk3.0-0v5'],
                 ['wx3.0-i18n']
         ]],
         [osline:'raspbian',
         osversion:'bullseye',
         arch: 'armhf', 
         dockerbase:'arm32v7/debian', 
         dockerfile:'Dockerfile.gtk3',
         dependencies:[
                ['libc6'],
                ['libgcc1'],
                ['libstdc++6'],
                ['libwxbase3.0-0v5'],
                ['libwxgtk3.0-gtk3-0v5'],
                ['wx3.0-i18n']
        ]],
        [osline:'raspbian',
         osversion:'bullseye',
         arch: 'arm64',
         dockerbase:'arm64v8/debian',
         dockerfile:'Dockerfile.gtk3',
         dependencies:[
                ['libc6'],
                ['libgcc1'],
                ['libstdc++6'],
                ['libwxbase3.0-0v5'],
                ['libwxgtk3.0-gtk3-0v5'],
                ['wx3.0-i18n']
        ]],

]


buildscript{
    repositories{
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies{
        classpath localGroovy()
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:7.5.0'
        classpath 'commons-net:commons-net:3.3'
        classpath 'org.eclipse.jgit:org.eclipse.jgit:4.6.0.201612231935-r'
        classpath group: 'org.ccil.cowan.tagsoup', name: 'tagsoup', version: '1.2.1'
        classpath "com.moowork.gradle:gradle-node-plugin:1.3.1"
    }
}

repositories{
    mavenCentral()
}


void checkGitVersion(String version){
    logger.info("checking for git tag $version")
    FileRepositoryBuilder builder=new FileRepositoryBuilder()
    Repository repo=builder.readEnvironment().findGitDir(project.buildDir).setMustExist(true).build()
    ObjectId head=repo.resolve("HEAD")
    logger.info "current git commit=$head.name"
    def tags=repo.getTags()
    def tagCommit=tags.get(version)
    assert tagCommit,"unable to find tag $version"
    ObjectId tagResolved=repo.resolve(tagCommit.getName())
    assert tagResolved.getName() == head.getName(),"found $version ($tagResolved.name) but this is not the current HEAD"
    logger.info "version $version resolves to $tagCommit"
}


if (! project.hasProperty('packageVersion')){
    SimpleDateFormat f=new SimpleDateFormat('YYYYMMdd')
    project.ext.avnavVersion=f.format(new Date())
}
else{
    project.ext.avnavVersion=project.packageVersion
}

logger.lifecycle "ProjectVersion=${project.avnavVersion}"


description="AvNav chart provider for o-charts"
apply plugin: 'java'

apply plugin: 'nebula.ospackage-base'
apply plugin: 'com.moowork.node'


class MyNpm extends NpmTask{
    def subDir
    @InputFiles
    def getInputFiles(){
        logger.debug "getInputFiles called for $name"
        return project.fileTree(project.projectDir,{
            exclude "build/**"
            exclude ".gradle/**"
        })
    }
    @OutputFiles
    def getOutputFiles(){
        logger.debug "getOutputFiles called for $name"
        return project.fileTree(project.projectDir,{
            include "build/$subDir/**"
        })
    }
    @OutputDirectory
    def getOutDir(){
        return project.file("build/$subDir")
    }
    public MyNpm(){
        outputs.upToDateWhen{
            def od=getOutDir()
            logger.debug "checking $od"
            if (! od.exists()) return false;
            return true
        }
    }
}

project(":gui") {
    apply plugin: 'com.moowork.node'
    task viewerRelease(type: MyNpm) {
        mustRunAfter(':cleanGui')
        subDir = "release"
        args = ["run", "release"]
        setExecOverrides({
            it.environment.put('AVNAV_VERSION', rootProject.avnavVersion)
        })
        dependsOn npmInstall
    }
    task viewerDebug(type: MyNpm) {
        mustRunAfter(':cleanGui')
        subDir = "debug"
        args = ["run", "build"]
        setExecOverrides({
            it.environment.put('AVNAV_VERSION', rootProject.avnavVersion+"-debug")
        })
        dependsOn npmInstall
    }
}

task testGit{
    doLast() {
        try {
            checkGitVersion("release-"+ project.avnavVersion)
        } catch (Error t) {
            if (!project.hasProperty("avnavIgnoreGit")) throw t;
            logger.lifecycle "### ignoring failed GIT check ###"
        }
    }
}




task pkgVersion{
    doLast() {
        ospackage.version = project.avnavVersion
        println "package version $ospackage.version"
    }
}

task packages{
    doLast(){
        println "created all packages"
    }
}
def GE=org.redline_rpm.header.Flags.GREATER|org.redline_rpm.header.Flags.EQUAL
def emptyBase=new File(project.buildDir,"empty")
ospackage {
    //release='3'
    os = LINUX // only applied to RPM
    packageGroup='misc'
    packageName='avnav-ocharts-plugin'
    requires('xvfb')
    requires('avnav','20210106',GE)
    requires('openssl')
    requires('libarchive13')
    requires('libglu1-mesa')
    requires('python3-psutil')
    requires('avnav-ocharts').or('avnav-oesenc')
    recommends('avnav-ocharts')
    user='root'
    into ('/usr/lib/avnav/plugins/ocharts') {
        from('s57data'){
            into "share/opencpn/s57data"
        }
        from('gui/build/release'){
            into "gui"
        }
        from('avnav-plugin') {
            include "*.py"
            include "*.sh"
            include "*.css"
            fileMode 0755
        }
        from('.'){
            include 'avnav.conf'
        }
    }
}
def imageExists(name){
    def id="docker images -q \"$name\"".execute().text.replaceAll("[\r\n]*","")
}

class DockerBuild extends Exec{
    public static def getImageName(osline,osversion,arch){
       return "avnavocharts-build-$osline-$osversion-$arch"
    }
    def dockerBase
    def osline
    def osversion
    def arch
    def dockerFile
    @TaskAction
    void exec(){
        assert osline != null
        assert osversion != null
        assert dockerFile != null
        assert arch != null
        def uid="id -u".execute().text.replaceAll("[\r\n]*","")
        assert uid
        def gid="id -g".execute().text.replaceAll("[\r\n]*","")
        assert gid
        def uname="id -u -n".execute().text.replaceAll("[\r\n]*","")
        assert uname
        logger.info("uid=$uid,gid=$gid,uname=$uname")
        def imageName=getImageName(osline,osversion,arch)
        if (dockerBase == null) dockerBase=osline
        executable "docker"
        workingDir project.file("docker")
        args(['build', '--build-arg',"OSLINE=$dockerBase",
                '--build-arg',"OSVERSION=$osversion",
                '--build-arg',"UID=$uid",
                '--build-arg',"GID=$gid",
                '--build-arg',"USER=$uname",
                '-f', dockerFile,
                '-t', imageName,'.'])
        super.exec()
    }
}
VARIANTS.each { variant ->
    def imageName=DockerBuild.getImageName(variant.osline,variant.osversion,variant.arch)
    def dt=tasks.create(name: "dockerbuild-${imageName}",type: DockerBuild){ DockerBuild e->
        e.dockerFile=variant.dockerfile
        e.dockerBase=variant.dockerbase
        e.osline=variant.osline
        e.osversion=variant.osversion
        e.arch=variant.arch
    }
    logger.lifecycle("created docker build task ${dt.name}")
    def workName="${variant.osline}-${variant.osversion}-${variant.arch}"
    def exeBuild=tasks.create(name:"build-${workName}",type: Exec){ Exec e->
        e.workingDir(file("provider"))
        e.executable(file("provider/build.sh"))
        e.args("-a")
        if (project.hasProperty("cleanBefore")) {
            e.args("-c")
        }
        e.args(workName)
        e.args(imageName)
        e.dependsOn(dt)
    }
    tasks.build.dependsOn(exeBuild)
    logger.lifecycle("created build task ${exeBuild.name}")
    def buildOutput="provider/${workName}"
    def exeName="AvnavOchartsProvider"
    def tkHandler="tokenHandler.js"
    def debBuild=tasks.create(name:"package-${workName}",type: Deb){  d ->
        variant.dependencies.each { dep->
            d.requires dep
        }
        d.packageName "avnav-ocharts-plugin"
        d.version="${project.avnavVersion}-${variant.osline}-${variant.osversion}"
        d.arch=variant.arch
        d.into("/usr/lib/avnav/plugins/ocharts"){
            from(buildOutput) {
                include exeName
                fileMode 0755
            }
            from(buildOutput) {
                include tkHandler
            }
        }
        d.doFirst{
            assert file("${buildOutput}/${exeName}").exists()
        }
    }
    debBuild.dependsOn(exeBuild)
    debBuild.dependsOn(':gui:viewerRelease')
    tasks.packages.dependsOn debBuild
    def cleanTask=tasks.create(name: "clean-${workName}",type: Delete){ c->
        delete buildOutput
    }
    tasks.clean.dependsOn(cleanTask)
}

def uploadDailyDir="daily-ochartsplugin"
def uploadReleaseDir="release-ochartsplugin"

task cleanGui(type: Delete){
    delete "viewer/build"
}

task uploadAccessDaily(type: UploadHtAccess){
    sourceName="daily.htaccess"
    baseDir=uploadDailyDir
    version=project.avnavVersion
}
task uploadAccessRelease(type: UploadHtAccess){
    sourceName="release.htaccess"
    baseDir=uploadReleaseDir
    version=project.avnavVersion
}

def packageList=fileTree("build/distributions",{
    include "*${project.avnavVersion}*.deb"
})

task uploadDaily(type: UploadTask){
    dependsOn cleanGui,packages, uploadAccessDaily
    inputFiles=packageList
    baseDir="$uploadDailyDir/${project.avnavVersion}"

}

task uploadRepoDaily(type: UploadSftp){
    server='free-x.de'
    base=''
    baseDir="daily/avnav-ocharts-provider/${project.avnavVersion}"
    inputFiles=packageList
    user="wellenvogel"
    dependsOn cleanGui,packages
}

task uploadRepoRelease(type: UploadSftp){
    server='free-x.de'
    base=''
    baseDir="release/avnav-ocharts-provider/${project.avnavVersion}"
    inputFiles=packageList
    user="wellenvogel"
    dependsOn cleanGui,packages
}

task uploadDailyTest(type: UploadSftp){
    server='sftp.hidrive.strato.com'
    base=''
    baseDir="public/share/xxx"
    inputFile=file("build.gradle")
    user="andvogel"
}


task uploadRelease(type: UploadTask){
    dependsOn testGit, cleanGui,packages, uploadAccessRelease
    inputFiles=packageList
    baseDir="$uploadReleaseDir/${project.avnavVersion}"
}
